openapi: 3.0.0
info:
  title: TaskFlow API
  version: 1.0.0
  description: |
    Personal task management API with JWT authentication.
    
    ## Authentication
    
    The API uses JWT (JSON Web Tokens) for authentication:
    
    1. **Register** or **login** to get a token
    2. **Include the token** in the `Authorization: Bearer {token}` header
    3. Tokens expire after 7 days
    
    ## Usage
    
    1. Start by testing the `/` endpoint to verify the API is working
    2. Create an account with `POST /api/auth/register`
    3. Get your token and use it for other endpoints
    
  contact:
    name: TaskFlow Team
    url: https://github.com/Guts6667/taskflow
    email: contact@taskflow.com

servers:
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from login.
        
        **Format:** `Bearer {your_token_here}`
        
        **Example:** `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...`

  schemas:
    # === AUTHENTICATION ===
    UserCredentials:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          description: "Valid email address"
        password:
          type: string
          minLength: 6
          example: "password123"
          description: "Password (minimum 6 characters)"

    User:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439011"
          description: "MongoDB unique identifier"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"
          description: "Account creation timestamp"

    AuthSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "User registered successfully"
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjUwN2YxZjc3YmNmODZjZDc5OTQzOTAxMSIsImlhdCI6MTcwNTMwNjIwMCwiZXhwIjoxNzA1OTExMDAwfQ.example"
              description: "JWT token for authenticated requests (expires in 7 days)"

    # === TASKS ===
    Task:
      type: object
      properties:
        id:
          type: string
          example: "507f1f77bcf86cd799439012"
        title:
          type: string
          maxLength: 100
          example: "Complete TaskFlow project"
          description: "Task title (required)"
        description:
          type: string
          maxLength: 500
          example: "Finalize the API and start React frontend"
          description: "Detailed description (optional)"
        status:
          type: string
          enum: [todo, in-progress, completed]
          example: "todo"
          description: "Current task status"
        priority:
          type: string
          enum: [low, medium, high]
          example: "medium"
          description: "Task priority level"
        dueDate:
          type: string
          format: date
          example: "2024-01-30"
          description: "Due date (optional)"
        completedAt:
          type: string
          format: date-time
          example: "2024-01-15T15:30:00.000Z"
          description: "Completion timestamp (automatic when status = completed)"
        userId:
          type: string
          example: "507f1f77bcf86cd799439011"
          description: "Owner user ID"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"

    TaskInput:
      type: object
      required: [title]
      properties:
        title:
          type: string
          maxLength: 100
          example: "Important new task"
          description: "Task title (required)"
        description:
          type: string
          maxLength: 500
          example: "Detailed description of what needs to be done"
          description: "Optional description"
        status:
          type: string
          enum: [todo, in-progress, completed]
          default: "todo"
          example: "todo"
        priority:
          type: string
          enum: [low, medium, high]
          default: "medium"
          example: "high"
        dueDate:
          type: string
          format: date
          example: "2024-02-15"
          description: "Due date in YYYY-MM-DD format"

    # === STANDARD RESPONSES ===
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Email and password are required"
        errors:
          type: array
          items:
            type: string
          example: ["Password must be at least 6 characters long"]
          description: "List of validation errors (optional)"

    HealthResponse:
      type: object
      properties:
        message:
          type: string
          example: "TaskFlow API is running ✅"
        version:
          type: string
          example: "1.0.0"
        express:
          type: string
          example: "4.x"
        port:
          type: number
          example: 3000
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"
        endpoints:
          type: object
          example:
            health: "GET /"
            register: "POST /api/auth/register"
            login: "POST /api/auth/login"

paths:
  # === SYSTEM ===
  /:
    get:
      summary: "Health Check"
      description: |
        Verifies that the API is working correctly.
        
        **Used for:**
        - Checking server responsiveness
        - Getting version and configuration info
        - First test before using the API
      tags: [System]
      responses:
        '200':
          description: "API is operational"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  # === AUTHENTICATION ===
  /api/auth/register:
    post:
      summary: "User Registration"
      description: |
        Creates a new user account.
        
        **Process:**
        1. Email validation (format + uniqueness)
        2. Password validation (minimum 6 characters)
        3. Secure password hashing with bcrypt
        4. Save to MongoDB database
        5. Generate JWT token
        
        **⚠️ Important:** Email must be unique in the system.
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
            examples:
              basic_user:
                summary: "Basic user"
                value:
                  email: "marie.smith@example.com"
                  password: "mypassword"
              secure_password:
                summary: "Secure password"
                value:
                  email: "admin@taskflow.com"
                  password: "SecurePassword2024!"
      responses:
        '201':
          description: "Account created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
              example:
                success: true
                message: "User registered successfully"
                data:
                  user:
                    id: "507f1f77bcf86cd799439011"
                    email: "marie.smith@example.com"
                    createdAt: "2024-01-15T10:30:00.000Z"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: "Validation error or email already in use"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                email_exists:
                  summary: "Email already in use"
                  value:
                    success: false
                    message: "User with this email already exists"
                validation_error:
                  summary: "Password too short"
                  value:
                    success: false
                    message: "Password must be at least 6 characters long"
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      summary: "User Login"
      description: |
        Authenticates an existing user.
        
        **Process:**
        1. Find user by email
        2. Verify password with bcrypt
        3. Generate new JWT token
        
        **JWT Token:**
        - Contains user ID
        - Expires in 7 days
        - Must be included in headers for subsequent requests
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
            example:
              email: "marie.smith@example.com"
              password: "mypassword"
      responses:
        '200':
          description: "Login successful"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '400':
          description: "Missing data"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Email and password are required"
        '401':
          description: "Invalid credentials"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Invalid email or password"

  # === TASKS (to be implemented) ===
  /api/tasks:
    get:
      summary: "List Tasks"
      description: |
        Retrieves all tasks for the authenticated user.
        
        **Available filters:**
        - `status`: todo, in-progress, completed
        - `priority`: low, medium, high
        - `sortBy`: createdAt, updatedAt, dueDate, title
        - `order`: asc, desc
        
        **Usage examples:**
        - `GET /api/tasks` → All tasks
        - `GET /api/tasks?status=todo` → Only todo tasks
        - `GET /api/tasks?priority=high&sortBy=dueDate` → High priority tasks sorted by due date
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: "Filter by status"
          schema:
            type: string
            enum: [todo, in-progress, completed]
          example: "todo"
        - name: priority
          in: query
          description: "Filter by priority"
          schema:
            type: string
            enum: [low, medium, high]
          example: "high"
        - name: sortBy
          in: query
          description: "Sort field"
          schema:
            type: string
            enum: [createdAt, updatedAt, dueDate, title]
            default: createdAt
          example: "dueDate"
        - name: order
          in: query
          description: "Sort order"
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          example: "asc"
      responses:
        '200':
          description: "Tasks list retrieved"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  count:
                    type: number
                    example: 3
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        '401':
          description: "Unauthorized - Missing or invalid token"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: "Create Task"
      description: |
        Creates a new task for the authenticated user.
        
        **Required fields:** title
        **Optional fields:** description, status, priority, dueDate
        
        **Default values:**
        - status: "todo"
        - priority: "medium"
      tags: [Tasks]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
            examples:
              simple_task:
                summary: "Basic task"
                value:
                  title: "Buy groceries"
              detailed_task:
                summary: "Detailed task"
                value:
                  title: "TaskFlow project presentation"
                  description: "Prepare complete demo with frontend and backend"
                  priority: "high"
                  dueDate: "2024-02-15"
      responses:
        '201':
          description: "Task created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Task created successfully"
                  data:
                    $ref: '#/components/schemas/Task'

  /api/tasks/{id}:
    get:
      summary: "Get Task"
      description: "Retrieves a specific task by its ID"
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "MongoDB task ID"
          schema:
            type: string
          example: "507f1f77bcf86cd799439012"
      responses:
        '200':
          description: "Task found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Task'
        '404':
          description: "Task not found or doesn't belong to user"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: "Update Task"
      description: |
        Updates an existing task.
        
        **Note:** Only provided fields will be updated.
        The `completedAt` field is automatically managed based on status.
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of task to update"
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
            example:
              title: "Updated title"
              status: "completed"
      responses:
        '200':
          description: "Task updated successfully"
        '404':
          description: "Task not found"

    delete:
      summary: "Delete Task"
      description: "Permanently deletes a task"
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of task to delete"
          schema:
            type: string
      responses:
        '200':
          description: "Task deleted successfully"
        '404':
          description: "Task not found"

  /api/tasks/stats:
    get:
      summary: "Task Statistics"
      description: |
        Retrieves statistical summary of user's tasks.
        
        **Includes:**
        - Total number of tasks
        - Breakdown by status (todo, in-progress, completed)
      tags: [Tasks]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Statistics retrieved"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      total:
                        type: number
                        example: 10
                        description: "Total number of tasks"
                      todo:
                        type: number
                        example: 3
                        description: "Tasks to do"
                      in-progress:
                        type: number
                        example: 4
                        description: "Tasks in progress"
                      completed:
                        type: number
                        example: 3
                        description: "Completed tasks"

tags:
  - name: System
    description: "System routes and health checks"
  - name: Authentication
    description: "User registration, login and JWT token management"
  - name: Tasks
    description: "Complete CRUD operations for user task management"